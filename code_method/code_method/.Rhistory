sj <- seq(min(size), max(size), length=20) ## knots
b <- prs.fit(wear, size, sj, 2) ## penalized fit
plot(size, wear) ## plot data
Xp <- tf.X(s, sj) ## prediction matrix
lines(s, Xp %*% coef(b)) ## plot the smooth
rho = seq(-9, 11, length=90)
n <- length(wear)
v <- rep(NA, 90)
for (i in 1:90){ ## loop through smoothing params
b <- prs.fit(wear, size, sj, exp(rho[i])) ## fit model
trF <- sum(influence(b)$hat[1:n]) ## extract EDF
rss <- sum((wear - fitted(b)[1:n]) ^2) ## residual SS
V[i] <- n*rss/(n-trF)^2 ## GCV score
}
rho = seq(-9, 11, length=90)
n <- length(wear)
V <- rep(NA, 90)
for (i in 1:90){ ## loop through smoothing params
b <- prs.fit(wear, size, sj, exp(rho[i])) ## fit model
trF <- sum(influence(b)$hat[1:n]) ## extract EDF
rss <- sum((wear - fitted(b)[1:n]) ^2) ## residual SS
V[i] <- n*rss/(n-trF)^2 ## GCV score
for (i in 1:90){ ## loop through smoothing params
b <- prs.fit(wear, size, sj, exp(rho[i])) ## fit model
trF <- sum(influence(b)$hat[1:n]) ## extract EDF
rss <- sum((wear - fitted(b)[1:n]) ^2) ## residual SS
V[i] <- n*rss/(n-trF)^2 ## GCV score
}
pplot(rho, V, type='l', xlab=expression(log(lambda)), main='GCV score')
sp <- exp(rho[V == min(V)]) ## extract optimal sp
b <- prs.fit(wear, size, sj, sp) ## re-fit
plot(size, wear, main='GCV optimal fit')
lines(s, Xp %*% coef(b))
plot(rho, V, type='l', xlab=expression(log(lambda)), main='GCV score')
plot(rho, V, type='l', xlab=expression(log(lambda)), main='GCV score')
V
rho = seq(-9, 11, length=90)
n <- length(wear)
V <- rep(NA, 90)
for (i in 1:90){ ## loop through smoothing params
b <- prs.fit(wear, size, sj, exp(rho[i])) ## fit model
trF <- sum(influence(b)$hat[1:n]) ## extract EDF
rss <- sum((wear - fitted(b)[1:n]) ^2) ## residual SS
V[i] <- n*rss/(n-trF)^2 ## GCV score
}
V
plot(rho, V, type='l', xlab=expression(log(lambda)), main='GCV score')
sp <- exp(rho[V == min(V)]) ## extract optimal sp
b <- prs.fit(wear, size, sj, sp) ## re-fit
plot(size, wear, main='GCV optimal fit')
lines(s, Xp %*% coef(b))
sp
X0 <- tf.X(size, sj) ## X in original parameterization
D <- rbind(0, 0, diff(diag(20), difference=2))
diag(D) <- 1 ## augmented D
X <- t(backsolve(t(D), t(X0))) ## re-parametrized X
Z <- X[, -c(1,2)]; X<- X[, 1:2] ## mixed model matrices
## estimate smoothing and variance parameters
m <- optim(c(0,0), llm, method='BFGS', X=X, Z=Z, y=wear) ## Bayesian model
b <- attr(llm(m$par, X, Z, wear), 'b') ## extract coefficients
## plot results
plot(size, wear)
Xp1 <- t(backsolve(t(D), t(Xp))) ## re-parameterized pred.mat.
lines(s, Xp1 %*% as.numeric(b), col='grey', lwd=2)
library(nlme)
g <- factor(rep(1, nrow(X))) ## dummy factor
m <- lme(wear ~ X - 1, random=list(g=pdIdent(~ Z-1)))
lines(s, Xp1 %*% as.numeric(coef(m))) ## and to plot
tf.XD <- function(x, xk, cmx=NULL, m=2){
## get X and D subject to constraint
nk <- length(xk)
X <- tf.X(x, xk)[, -nk] ## basis matrix
D <- diff(diag(nk), differences=m)[, -nk] ## root penalty
if (is.null(cmx)) cmx <- colMeans(X)
X <- sweep(X, 2, cmx) ## subtract cmx from columns
list (X=X, D=D, cmx=cmx)
}
am.fit <- function (y,x,v,sp,k=10) {
## setup basis and penalties...
xk <- seq(min(x), max(x), length=k)
xdx <- tf.XD(x, xk)
vk <- seq(min(v), max(v), length=k)
xdv <- tf.XD(v, vk)
## create augmented model matrix and response ...
nD <- nrow(xdx$D) * 2
sp <- sqrt(sp)
X <- cbind(c(rep(1, nrow(xdx$X)), rep(0, nD)),
rbind(xdx$X, sp[1]*xdx$D, xdv$D*0),
rbind(xdv$X, xdx$D*0, sp[2]*xdv$D))
y1 <- c(y, rep(0, nD))
## fit model ..
b <- lm(y1 ~ X - 1)
## compute some useful quantities ...
n <- length(y)
trA <- sum(influence(b)$hat[1:n]) ## EDF
rsd <- y - fitted(b)[1:n] ## residuals
rss <- sum(rsd^2) ## residual SS
sig.hat <- rss/(n-trA) ## residual variance
gcv <- sig.hat*n/(n-trA) ## GCV score
Vb <- vcov(b)*sig.hat/summary(b)$sigma^2 ## coef cov matrix
## return fitted model ...
list(b=coef(b), Vb=Vb, edf=trA, gcv=gcv, fitted=fitted(b)[1:n],
rsd=rsd, xk=list(xk, vk), cmx=list(xdx$cmx, xdv$cmx))
}
am.gcv <- function(lsp, y, x, v, k){
## function suitable for GCV optimization by optim
am.fit(y, x, v, exp(lsp), k)$gcv
}
require(mgcv)
## mgcv package
library(mgcv)
data(trees)
ct1 <- gam(Volume ~ s(Height) + s(Girth), family = Gamma(link=log), data=trees)
ct1
plot(ct1, residuals=TRUE)
## use penalized cubic regression splines
ct2 <- gam(Volume ~ s(Height, bs='cr') + s(Girth, bs='cr'),
family=Gamma(link=log), data=trees)
cts
ct2
## change dimension of basis (i.e. max df; default is 10)
ct3 <- gam(Volume ~ s(Height, bs='cr') + s(Girth, bs='cr',k=20),
family=Gamma(link=log), data=trees)
ct3
## adjust gamma param to avoid overfitting of GCV
ct4 <- gam(Volume ~ s(Height, bs='cr') + s(Girth, bs='cr'),
family=Gamma(link=log), data=trees, gamma=1.4)
ct4
## same model, different code
ct5 <- gam(Volume ~ s(Height, Girth,k=25),
family=Gamma(link=log), data=trees)
ct5
plot(ct5, too.far=0.15)
## user tensor product smooth ('te')
ct6 <- gam(Volume ~ te(Height, Girth,k=25),
family=Gamma(link=log), data=trees)
## user tensor product smooth ('te')
ct6 <- gam(Volume ~ te(Height, Girth,k=5),
family=Gamma(link=log), data=trees)
ct6
plot(ct6, too.far=0.15)
## mix smooth and parametric model
gam(Volume ~ Height + s(Girth), family = Gamma(link=log), data=trees)
labels=c('small', 'medium', 'large')
## change Height to be categorical
trees$Hclass <- factor(floor(trees$Height/10) -5,
labels=c('small', 'medium', 'large'))
ct7 <- gam(Volume ~ Hclass + s(Girth), family=Gamma(link=log), data=trees)
par(mfrow=c(1,2)); plot(ct7,all.terms=TRUE)
anova(ct7)
AIC(ct7)
summary(ct7)
22.5*4*4
FEAST - a scalable algorithm for quantifying the origins of complex microbial communities
-----------------------
300 * 0.85
300 * 0.95
114.32-107.7
19.05 + 5.40
9.91 + 21.32 - 22.04 + 20.94
391.60/5
library(vegan)
5000/12
667.5+445
667.5+445
300*0.85
350*0.85
250*0.85
325*0.85
25*0.85
100*0.85
299.99*0.9
299.99*0.95
30*0.85
25*0.85
160*0.85
25*0.85
175*0.85
295*0.85
50.44+48.92
41.88+42.61
41.88+42.61+48.87+42.61+41.88+20.49
1.24+123.11
246.05+42.98+8.99+25.74+24.45+15.16+19.83+38.58+25.25+9.89+15.05
179.92+25.67+114.32+45.21+126.98+109.01+74.85+21.48+6.62+179.92+25.67+7.63+19.99
19.99+126.98+109.01+7.63+74.85+114.32+21.48+6.62+179.92+25.67
8.28+44.24+8.28+55.91+2.96+41.38+54.60
45.16+46.69
686.47+215.65+91.85
99.36+19.67+471.97+60
410+113+1010+705
25.67+179.92+114.32+21.48+74.85-107.7+15.69+109.01+25.74+45.21+126.98-20.46+19.99+22.27
3262.33+123.11
1200+400+3500
5100+100
5200+300
+1000
1200+400+3500+100
5200+300
3800-5500
1700-500
1200+400+1000+3500+100+300
1000+200+400+800+3500+100+300
15*0.85
log(10)
0.2*360
39.99+10+5
66/4
6252.42/167.89
6252.42-167.89*37
67*167.88 + 84.33*47
167*167.88 + 84.33*47
27600.04/167.92
27600-167.92*164
27290.96/167.92
1.6*12
1.66*12
85266+29907-19819
19400*0.1+(71963-19400)*0.12
85266+29907
115-33
19400*0.1+(78950-19400)*0.12 + (85098-78950)*0.22
1457+9596
1457+8596
(85098-78950)*0.22
85-78
2.4*12*30
504*(1+0.04)*30
504*(1+0.04*30)
864-504
360/30
504*0.04
9700*0.1 + (3475-9701)*0.12 + (84200-39475)*0.22
9700*0.1 + (3475-9701)*0.12 + (60000-39475)*0.22
9700*0.1 + (39475-9700)*0.12 + (60000-39475)*0.22
1/6*100
9058.5/60000*100
4250/2/40
4250/15/8
4250/11/8
40*8*20
4250*2-800
4250/11/8
10200/12
102000/12
Q_true=c(2,2)
D_true=diag(rep(1,sum(Q_true)));D_true[1,1]=2;D_true[3,3]=2
D_true
560-336
224/2
379-336
library(vegan)
require(devtools)
install_version('vegan', version='2.4-5', repos = "http://cran.us.r-project.org")
remove.packages('vegan')
library(vegan)
packageurl <- "http://cran.r-project.org/src/contrib/Archive/vegan/vegan_2.4-5.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
library(vegan)
require(vegan)
library(vegan)
install.packages('vegan')
x  = c(0.091334011	0.025905727	0.01974161	0.018856484	0.013011922	0.012761575	0.01100478	0.010578836	0.009979589	0.00904816)
x  = c(0.091334011,	0.025905727,	0.01974161,	0.018856484,	0.013011922,	0.012761575,	0.01100478,	0.010578836,	0.009979589,	0.00904816)
sum(x)
x = c(0.091334011,	0.025905727,	0.01974161,	0.018856484,
0.013011922,	0.012761575,	0.01100478,	0.010578836,
0.009979589,	0.00904816,	0.008958018,	0.008589943,
0.00785287,	0.00765184,	0.007467706,	0.007287216,
0.006965848,	0.006755768,	0.006636542,	0.006301882,
0.0061295,	0.006015469,	0.005800592,	0.005783671,
0.005778392,	0.0055334,	0.005382178,	0.005257952,
0.005182785,	0.005143431,	0.005030947,	0.00481717,
0.004785166,	0.004694106,	0.004601204,	0.004475299,
0.004354599,	0.004318955,	0.004270652,	0.004198983,
0.004157922,	0.004062977,	0.003989954,	0.003962911,
0.003896029,	0.003848106,	0.003802821,	0.003784158
0.003735151,	0.003614947,	0.003559739,	0.003538204,
0.003528331,	0.003471536,	0.00344668,	0.003402687,
0.003379342,	0.003304449,	0.003277739,	0.003195305,
0.003151292,	0.003135639,	0.00311487,	0.003099307,
0.003074084,	0.003056642,	0.003002414,	0.002963455,
0.002945777,	0.002918342,	0.002905173,	0.002885431,
0.002874419,	0.002847796,	0.002830868,	0.002812113,
0.002779548,	0.002738537,	0.002712988,	0.002709081)
x = c(0.091334011,	0.025905727,	0.01974161,	0.018856484,
0.013011922,	0.012761575,	0.01100478,	0.010578836,
0.009979589,	0.00904816,	0.008958018,	0.008589943,
0.00785287,	0.00765184,	0.007467706,	0.007287216,
0.006965848,	0.006755768,	0.006636542,	0.006301882,
0.0061295,	0.006015469,	0.005800592,	0.005783671,
0.005778392,	0.0055334,	0.005382178,	0.005257952,
0.005182785,	0.005143431,	0.005030947,	0.00481717,
0.004785166,	0.004694106,	0.004601204,	0.004475299,
0.004354599,	0.004318955,	0.004270652,	0.004198983,
0.004157922,	0.004062977,	0.003989954,	0.003962911,
0.003896029,	0.003848106,	0.003802821,	0.003784158
0.003735151,	0.003614947,	0.003559739,	0.003538204,
0.003528331,	0.003471536,	0.00344668,	0.003402687,
0.003379342,	0.003304449,	0.003277739,	0.003195305,
0.003151292,	0.003135639,	0.00311487,	0.003099307,
0.003074084,	0.003056642,	0.003002414,	0.002963455,
0.002945777,	0.002918342,	0.002905173,	0.002885431,
0.002874419,	0.002847796,	0.002830868,	0.002812113,
0.002779548,	0.002738537,	0.002712988,	0.002709081)
x = c(0.091334011,	0.025905727,	0.01974161,	0.018856484,
0.013011922,	0.012761575,	0.01100478,	0.010578836,
0.009979589,	0.00904816,	0.008958018,	0.008589943
x = c(0.091334011,	0.025905727,	0.01974161,	0.018856484,
0.013011922,	0.012761575,	0.01100478,	0.010578836,
0.009979589,	0.00904816,	0.008958018,	0.008589943,
0.00785287,	0.00765184,	0.007467706,	0.007287216,
0.006965848,	0.006755768,	0.006636542,	0.006301882,
0.0061295,	0.006015469,	0.005800592,	0.005783671,
0.005778392,	0.0055334,	0.005382178,	0.005257952,
0.005182785,	0.005143431,	0.005030947,	0.00481717,
0.004785166,	0.004694106,	0.004601204,	0.004475299,
0.004354599,	0.004318955,	0.004270652,	0.004198983,
0.004157922,	0.004062977,	0.003989954,	0.003962911,
0.003896029,	0.003848106,	0.003802821,	0.003784158
0.003735151,	0.003614947,	0.003559739,	0.003538204,
0.003528331,	0.003471536,	0.00344668,	0.003402687,
0.003379342,	0.003304449,	0.003277739,	0.003195305,
0.003151292,	0.003135639,	0.00311487,	0.003099307,
0.003074084,	0.003056642,	0.003002414,	0.002963455,
0.002945777,	0.002918342,	0.002905173,	0.002885431,
0.002874419,	0.002847796,	0.002830868,	0.002812113,
0.002779548,	0.002738537,	0.002712988,	0.002709081)
x = c(0.091334011,	0.025905727,	0.01974161,	0.018856484,
0.013011922,	0.012761575,	0.01100478,	0.010578836)
x = c(0.091334011,	0.025905727,	0.01974161,	0.018856484,
0.013011922,	0.012761575,	0.01100478,	0.010578836,
0.009979589,	0.00904816,	0.008958018,	0.008589943,
0.00785287,	0.00765184,	0.007467706,	0.007287216,
0.006965848,	0.006755768,	0.006636542,	0.006301882,
0.0061295,	0.006015469,	0.005800592,	0.005783671,
0.005778392,	0.0055334,	0.005382178,	0.005257952,
0.005182785,	0.005143431,	0.005030947,	0.00481717,
0.004785166,	0.004694106,	0.004601204,	0.004475299,
0.004354599,	0.004318955,	0.004270652,	0.004198983,
0.004157922,	0.004062977,	0.003989954,	0.003962911,
0.003896029,	0.003848106,	0.003802821,	0.003784158
0.003735151,	0.003614947,	0.003559739,	0.003538204,
0.003528331,	0.003471536,	0.00344668,	0.003402687,
0.003379342,	0.003304449,	0.003277739,	0.003195305,
0.003151292,	0.003135639,	0.00311487,	0.003099307,
0.003074084,	0.003056642,	0.003002414,	0.002963455,
0.002945777,	0.002918342,	0.002905173,	0.002885431,
0.002874419,	0.002847796,	0.002830868,	0.002812113,
0.002779548,	0.002738537,	0.002712988,	0.002709081)
x = c(0.091334011,	0.025905727,	0.01974161,	0.018856484,
0.013011922,	0.012761575,	0.01100478,	0.010578836,
0.009979589,	0.00904816,	0.008958018,	0.008589943,
0.00785287,	0.00765184,	0.007467706,	0.007287216
)
x = c(0.091334011,	0.025905727,	0.01974161,	0.018856484,
0.013011922,	0.012761575,	0.01100478,	0.010578836,
0.009979589,	0.00904816,	0.008958018,	0.008589943,
0.00785287,	0.00765184,	0.007467706,	0.007287216,
0.006965848,	0.006755768,	0.006636542,	0.006301882,
0.0061295,	0.006015469,	0.005800592,	0.005783671,
0.005778392,	0.0055334,	0.005382178,	0.005257952,
0.005182785,	0.005143431,	0.005030947,	0.00481717
)
x = c(0.091334011,	0.025905727,	0.01974161,	0.018856484,
0.013011922,	0.012761575,	0.01100478,	0.010578836,
0.009979589,	0.00904816,	0.008958018,	0.008589943,
0.00785287,	0.00765184,	0.007467706,	0.007287216,
0.006965848,	0.006755768,	0.006636542,	0.006301882,
0.0061295,	0.006015469,	0.005800592,	0.005783671,
0.005778392,	0.0055334,	0.005382178,	0.005257952,
0.005182785,	0.005143431,	0.005030947,	0.00481717,
0.004785166,	0.004694106,	0.004601204,	0.004475299,
0.004354599,	0.004318955,	0.004270652,	0.004198983,
0.004157922,	0.004062977,	0.003989954,	0.003962911,
0.003896029,	0.003848106,	0.003802821,	0.003784158,
0.003735151,	0.003614947,	0.003559739,	0.003538204,
0.003528331,	0.003471536,	0.00344668,	0.003402687,
0.003379342,	0.003304449,	0.003277739,	0.003195305,
0.003151292,	0.003135639,	0.00311487,	0.003099307,
0.003074084,	0.003056642,	0.003002414,	0.002963455,
0.002945777,	0.002918342,	0.002905173,	0.002885431,
0.002874419,	0.002847796,	0.002830868,	0.002812113,
0.002779548,	0.002738537,	0.002712988,	0.002709081)
cumsum(x)
plot(cumsum(x), type='b')
data(dune)
data(dune.env)
dune.Manure <- rda(dune ~ Manure, dune.env)
library(vegan)
data(dune)
data(dune.env)
dune.Manure <- rda(dune ~ Manure, dune.env)
plot(dune.Manure)
head(dune.env)
aa = c(133.5, 534, 667.5, 445, 22.5, 133.5)
sum(aa)
aa = c(133.5, 534, 667.5, 445, 22a.5, 133.5)
aa = c(133.5, 534, 667.5, 445, 222.5, 133.5)
sum(aa)
sum(500, 615, 300, 410)
expression('hi'[5]*'there'[6]^8*'you'[2])
plot(1:10, xlab=expression('hi'[5]*'there'[6]^8*'you'[2]))
c(expression('1,25(OH)'[2]*'D'), 'Race'
)
paste0('"Hello"', ' ~ r[xy] == ')
expression(u, 2, u + 0:9)
length(ex3 <- expression(u, 2, u + 0:9)) # 3
mode(ex3 [3])   # expression
mode(ex3[[3]])
sapply(ex3, mode  )
sapply(ex3, typeof)
2^10
pf(10.86, 6)
pf(10.86, 298, 6)
pf(10.86, 1, 6)
pf(10.86, 6, 298)
0.022759817*100
library(scales)
show_col(hue_pal()(6))
library(scales)
show_col(hue_pal()(12))
size = c(50, 100, 500, 1000)
idx = 0
for (P in size){
for (N in size){
idx = idx + 1
dim.list[[idx]] = c(P=P, N=N)
}
}
files = NULL
for (dim in dim.list){
p = dim[1]
n = dim[2]
files = cbind(files, paste0(dir, '/sim_independent_', paste('P', p, 'N', n, sep='_'), '.RData'))
}
dim.list = list()
size = c(50, 100, 500, 1000)
idx = 0
for (P in size){
for (N in size){
idx = idx + 1
dim.list[[idx]] = c(P=P, N=N)
}
}
dim.list
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
head(data)
# library
library(ggplot2)
library(viridis)
library(hrbrthemes)
ggplot(data, aes(fill=condition, y=value, x=condition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_viridis(discrete = T, option = "E") +
ggtitle("Studying 4 species..") +
facet_wrap(~specie) +
theme_ipsum() +
theme(legend.position="none") +
xlab("")
install.packages('hrbrthemes')
install.packages("hrbrthemes")
View(data)
View(data)
View(data)
78404/1975
962/1975
645/1975
423/1975
216/1975
install.packages('funcy')
library(funcy)
packageurl <- "https://cran.r-project.org/src/contrib/Archive/funcy/funcy_1.0.1.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
library(funcy)
setwd("~/Study/thesis/machineLearning/stability/simulations_2020/code_method")
args = commandArgs(trailingOnly=TRUE)
print(args)
dir = args[1]
source('cv_method.R')
source('getStability.R')
source('stab_data_applications.R')
#####################################
##### data preparation ##############
#####################################
load('../data_application/vitaminD/vitaminD_genus_table.RData')
count = vit_otu
## filter 1% + add pesudo count
x <- count[, colMeans(count > 0) >= 0.01]
x = count
x[x == 0] <- 0.5
x <- x/rowSums(x) # relative abundance
taxa <- log(x)
print(paste('number of features:', dim(taxa)[2], sep=':'))
# # metadata
mf <- read.csv("../data_application/vitaminD/mros_mapping_alpha.txt", sep='\t', row.names=1)
mf <- mf[complete.cases(mf$OHV1D3), ] # remove data with missing 1,25 info
ids = match(rownames(count), rownames(mf))
y <- mf$OHV1D3[ids]
taxa <- taxa[ids, ]
# save processed data
save(y, taxa, file='../data_application/vitaminD/vitaminD_125.RData')
load('../data_application/vitaminD/vitaminD_genus_table.RData')
read.csv('../data_application/vitaminD/vitaminD_genus_table.RData')
23231/566
2156/566
1301/566
883/566
522/566
